class Solution {
    public void dfs(int i, int j, boolean[][] vis, char[][] board, int[] dr, int[] dc){
        vis[i][j]=true;
        int n=board.length;
        int m=board[0].length;
        for(int k=0;k<4;k++){
            int nr=dr[k]+i;
            int nc=dc[k]+j;
            if(nr>=0 && nc>=0 && nr<n && nc<m && vis[nr][nc]==false && board[nr][nc]=='O'){
                dfs(nr, nc, vis, board, dr, dc);
            }
        }
    }
    public void solve(char[][] board) {
        int n=board.length;
        int m=board[0].length;
        int[] dr={-1, 0, 1, 0};
        int[] dc={0, 1, 0, -1};
        boolean[][] vis = new boolean[n][m];
        for(int j=0;j<m;j++){
            if(!vis[0][j] && board[0][j]=='O'){
                dfs(0, j, vis, board, dr, dc);
            }
            if(!vis[n-1][j] && board[n-1][j]=='O'){
                dfs(n-1, j, vis, board, dr, dc);
            }
        }

        for(int i=0;i<n;i++){
            if(!vis[i][0] && board[i][0]=='O'){
                dfs(i, 0, vis, board, dr, dc);
            }
            if(!vis[i][m-1] && board[i][m-1]=='O'){
                dfs(i, m-1, vis, board, dr, dc);
            }
        }
        for(int i=0;i<n;i++){
            for(int j=0;j<m;j++){
                if(vis[i][j]==false && board[i][j]=='O'){
                    board[i][j]='X';
                }
            }
        }
    }
}