class Solution {
    public List<String> topKFrequent(String[] words, int k) {
        HashMap<String, Integer> mp = new HashMap<>();
        for(String w:words){
            mp.put(w, mp.getOrDefault(w, 0)+1);
        }
        PriorityQueue<Pair<String, Integer>> pq = new PriorityQueue<>(
            (a, b) -> {
                if (!a.getValue().equals(b.getValue())) {
                    return b.getValue() - a.getValue(); // Decreasing order of Integer
                } else {
                    return a.getKey().compareTo(b.getKey()); // Lexicographical order of String
                }
            }
        );
        for(Map.Entry<String, Integer> m:mp.entrySet()){
            pq.offer(new Pair<>(m.getKey(), m.getValue()));
        }
        ArrayList<String> ans = new ArrayList<>();
        for(int i=0;i<k;i++){
            Pair<String, Integer> p=pq.poll();
            ans.add(p.getKey());
        }
        return ans;
    }
}