class Solution {
    public static void dfs(boolean[] vis, ArrayList<ArrayList<Integer>> adj, int no){
        vis[no]=true;
        for(Integer it:adj.get(no)){
            if(vis[it]==false){
                dfs(vis, adj, it);
            }
        }
    }
    public int findCircleNum(int[][] isConnected) {
        ArrayList<ArrayList<Integer>> adj = new ArrayList<>();
        int v=isConnected.length;
        for(int i=0;i<v;i++){
            adj.add(new ArrayList<Integer>());
        }
        for(int i=0;i<v;i++){
            for(int j=0;j<v;j++){
                if(isConnected[i][j]==1 && i!=j){
                    adj.get(i).add(j);
                    adj.get(j).add(i);
                }
            }
        }
        int ans=0;
        boolean[] vis = new boolean[v];
        for(int i=0;i<v;i++){
            
            if(vis[i]==false){
                ans++;
                dfs(vis, adj, i);
            }
        }
        return ans;
    }
}