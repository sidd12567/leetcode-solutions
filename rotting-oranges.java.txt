class Pair{
    int first;
    int second;
    int tm;
    public Pair(int first, int second, int tm){
        this.first= first;
        this.second=second;
        this.tm=tm;
    }
}
class Solution {
    public int orangesRotting(int[][] grid) {
        int n=grid.length;
        int m=grid[0].length;
        Queue<Pair> q = new LinkedList<>();
        int[][] vis = new int[n][m];
        int cnt=0;
        for(int i=0;i<n;i++){
            for(int j=0;j<m;j++){
                if(grid[i][j]==2){
                    q.add(new Pair(i, j, 0));
                    vis[i][j]=2;
                }
                else{
                    vis[i][j]=0;
                }
                if(grid[i][j]==1){
                    cnt++;
                }
            }
        }
        int ttr=0;
        int rtc=0;
        int[] dr={-1, 0, 1, 0};
        int[] dc={0, 1, 0, -1};
        while(!q.isEmpty()){
            Pair p =q.poll();
            int fs=p.first;
            int sc=p.second;
            int ti=p.tm;
            ttr=Math.max(ttr, ti);
            for(int i=0;i<4;i++){
                int nr=fs+dr[i];
                int nc=sc+dc[i];
                if(nr>=0 && nr<n && nc>=0 && nc<m && grid[nr][nc]==1 && vis[nr][nc]==0){
                    q.add(new Pair(nr, nc, ti+1));
                    vis[nr][nc]=2;
                    rtc++;
                }
            }
        }
        if(cnt!=rtc){
            return -1;
        }
        return ttr;
    }
}