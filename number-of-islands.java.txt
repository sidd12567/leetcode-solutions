class Pair{
    int first;
    int second;
    public Pair(int first, int second){
        this.first=first;
        this.second=second;
    }
}
class Solution {
    public static void bfs(int row, int col, boolean[][] vis, char[][] grid){
        vis[row][col]=true;
        Queue<Pair> q = new LinkedList<Pair>();
        q.add(new Pair(row, col));
        int n=grid.length;
        int m=grid[0].length;
        int[] dRow = {-1, 0, 1, 0}; // up, right, down, left
    int[] dCol = {0, 1, 0, -1};
        while(!q.isEmpty()){
            int rw=q.peek().first;
            int cl=q.peek().second;
            q.remove();
        
            for(int i=0;i<4;i++){
                
                    int nr=rw+dRow[i];
                    int nc=cl+dCol[i];
                if(nr>=0 && nr<n && nc>=0 && nc<m && grid[nr][nc]=='1' && vis[nr][nc]==false){
                    vis[nr][nc]=true;
                    q.add(new Pair(nr, nc));
                }
            
        }
        }
    }
    public int numIslands(char[][] grid) {
        int n=grid.length;
        int m=grid[0].length;
        boolean[][] vis = new boolean[n][m];
        int ans=0;
        for(int i=0;i<n;i++){
            for(int j=0;j<m;j++){
                if(vis[i][j]==false && grid[i][j]=='1'){
                    ans++;
                    bfs(i, j, vis, grid);
                }
            }
        }
        return ans;
    }
}