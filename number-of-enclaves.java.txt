class Pair{
    int first;
    int second;
    public Pair(int first, int second){
        this.first=first;
        this.second=second;

    }
}
class Solution {
    public int numEnclaves(int[][] grid) {
        Queue<Pair> q = new LinkedList<>();
        
        int n=grid.length;
        int m=grid[0].length;
        boolean[][] vis=new boolean[n][m];
        for(int i=0;i<n;i++){
            for(int j=0;j<m;j++){
                if(i==0 || j==0 || i==n-1 || j==m-1 ){
                    if(grid[i][j]==1){
                        q.add(new Pair(i, j));
                        vis[i][j]=true;
                    }
                    
                }
            }
        }
        int[] dr={-1, 0, 1, 0};
        int[] dc={0, 1, 0, -1};
        while(!q.isEmpty()){
            Pair p=q.poll();
            int fi=p.first;
            int se=p.second;
            for(int i=0;i<4;i++){
                int nr=dr[i]+fi;
                int nc=dc[i]+se;
                if(nr>=0 && nc>=0 && nr<n && nc<m && vis[nr][nc]==false && grid[nr][nc]==1){
                    q.add(new Pair(nr, nc));
                    vis[nr][nc]=true;
                }
            }

        }
        int ans=0;
        for(int i=0;i<n;i++){
            for(int j=0;j<m;j++){
             if(vis[i][j]==false && grid[i][j]==1){
                ans++;
             }   
            }
        }
        return ans;
    }
}