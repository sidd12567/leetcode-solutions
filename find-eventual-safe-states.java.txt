class Solution {
    public boolean dfs(int i, boolean[] vis, boolean[] chk, boolean[] pv, ArrayList<ArrayList<Integer>> adj){
        vis[i]=true;
        chk[i]=false;
        pv[i]=true;
        for(int ii:adj.get(i)){
            if(vis[ii]==false){
                if(dfs(ii, vis, chk, pv, adj)==true){
                    return true;
                }

            }
            else if(pv[ii]==true){
                return true;
            }
        }
        chk[i]=true;
        pv[i]=false;
        return false;
    }
    public List<Integer> eventualSafeNodes(int[][] graph) {
        List<Integer> sf = new ArrayList<>();
        int v=graph.length;

        boolean[] vis = new boolean[v];
        boolean[] chk = new boolean[v];
        boolean[] pv = new boolean[v];
        ArrayList<ArrayList<Integer>> adj = new ArrayList<>();
        for(int i=0;i<v;i++){
            adj.add(new ArrayList<>());
        }
        for (int i = 0; i < v; i++) {
            for (int j = 0; j < graph[i].length; j++) {
                adj.get(i).add(graph[i][j]);
            }
        }
        for(int i=0;i<v;i++){
            if(vis[i]==false){
                dfs(i, vis, chk, pv, adj);
            }
        }
        for(int i=0;i<v;i++){
            if(chk[i]==true){
                sf.add(i);
            }
        }
        return sf;
    }
}