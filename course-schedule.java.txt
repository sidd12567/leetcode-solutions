class Solution {
    public boolean canFinish(int numCourses, int[][] prerequisites) {
        ArrayList<ArrayList<Integer>> adj = new ArrayList<>();
        ArrayList<Integer> ans = new ArrayList<>();

        int n=numCourses;
        for(int i=0;i<n;i++){
            adj.add(new ArrayList<>());
        }
        int[] ind = new int[n];
        for(int i=0;i<prerequisites.length;i++){
            adj.get(prerequisites[i][0]).add(prerequisites[i][1]);
        }
        for(int i=0;i<n;i++){
            for(int ii:adj.get(i)){
                ind[ii]++;
            }
        }
        Queue<Integer> q = new LinkedList<>();
        for(int i=0;i<n;i++){
            if(ind[i]==0){
                q.add(i);
            }
        }
        while(!q.isEmpty()){
            int nn=q.poll();
            ans.add(nn);
            for(int ii:adj.get(nn)){
                ind[ii]--;
                if(ind[ii]==0){
                    q.add(ii);
                }
            }
        }
        return ans.size()==n ?true:false;
    }
}